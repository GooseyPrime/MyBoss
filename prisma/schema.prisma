generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  provider  String?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  repos     Repo[]
  health    ProjectHealth?
}

model Repo {
  id            String   @id @default(cuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fullName      String   @unique
  defaultBranch String?
  type          String?
  url           String?
  provider      String?
  // New fields for general project tracking
  buildStatus   String?  // "passing", "failing", "unknown"
  lastBuildAt   DateTime?
  openPrCount   Int      @default(0)
  openIssueCount Int     @default(0)
  healthScore   Float?   // 0-100 score for overall repo health
  isArchived    Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  audits        AuditRun[]
  buildRuns     BuildRun[]
  actionPlans   ActionPlan[]
}

model AuditRun {
  id         String    @id @default(cuid())
  repoId     String
  repo       Repo      @relation(fields: [repoId], references: [id], onDelete: Cascade)
  commitSha  String    @unique
  status     String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  rawJson    Json?
  findings   Finding[]
  patchPlans PatchPlan[]
  @@index([repoId, startedAt(sort: Desc)])
}

model Finding {
  id        String   @id @default(cuid())
  auditId   String
  audit     AuditRun @relation(fields: [auditId], references: [id], onDelete: Cascade)
  kind      String
  title     String
  severity  String
  fileRefs  String[]
  detail    Json
  createdAt DateTime @default(now())
  @@index([auditId])
  @@index([severity])
}

model PatchPlan {
  id        String   @id @default(cuid())
  auditId   String
  audit     AuditRun @relation(fields: [auditId], references: [id], onDelete: Cascade)
  rank      Int
  why       String
  files     String[]
  diff      String
  rollback  String
  createdAt DateTime @default(now())
}

model SecretsMeta {
  id        String   @id @default(cuid())
  key       String  @unique
  value     String
  createdAt DateTime @default(now())
}

model Integration {
  id        String   @id @default(cuid())
  type      String
  config    String
  createdAt DateTime @default(now())
}

model Module {
  id        String   @id @default(cuid())
  name      String
  config    String
  createdAt DateTime @default(now())
}

model Thread {
  id        String   @id @default(cuid())
  provider  String
  title     String?
  createdAt DateTime @default(now())
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author    String
  role      String
  content   String
  ts        DateTime
  meta      Json?
  createdAt DateTime @default(now())
  @@index([threadId])
  @@index([author])
  @@index([role])
}

// New models for general project tracking

model BuildRun {
  id          String    @id @default(cuid())
  repoId      String
  repo        Repo      @relation(fields: [repoId], references: [id], onDelete: Cascade)
  commitSha   String
  status      String    // "success", "failure", "in_progress", "cancelled"
  startedAt   DateTime  @default(now())
  finishedAt  DateTime?
  duration    Int?      // in seconds
  buildTool   String?   // "npm", "pnpm", "yarn", "gradle", etc.
  errorLog    String?
  artifacts   Json?     // artifact metadata
  
  @@index([repoId, startedAt(sort: Desc)])
  @@index([status])
}

model ActionPlan {
  id          String      @id @default(cuid())
  repoId      String?
  repo        Repo?       @relation(fields: [repoId], references: [id], onDelete: Cascade)
  projectId   String?     // Can be associated with project instead of specific repo
  title       String
  description String?
  status      String      @default("open") // "open", "in_progress", "completed", "cancelled"
  priority    String      @default("medium") // "high", "medium", "low"
  category    String      @default("general") // "security", "build", "dependency", "feature", etc.
  assignee    String?
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tasks       ActionTask[]
  
  @@index([status])
  @@index([priority])
  @@index([category])
}

model ActionTask {
  id          String      @id @default(cuid())
  planId      String
  plan        ActionPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      String      @default("todo") // "todo", "in_progress", "done"
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([planId, order])
}

model ProjectHealth {
  id            String   @id @default(cuid())
  projectId     String   @unique
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  overallScore  Float    @default(0) // 0-100
  buildScore    Float    @default(0)
  securityScore Float    @default(0)
  codeQuality   Float    @default(0)
  activity      Float    @default(0)
  lastUpdated   DateTime @default(now())
  metrics       Json?    // Additional metrics storage
}
